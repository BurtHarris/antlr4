TestType() ::= "CompositeParser"

Grammar ::= [
	"M": {<masterGrammar("M", "S")>}
]

SlaveGrammars ::= [
	"S": {<slaveGrammar("S")>}
]

Rule() ::= "program"

Input() ::= "test test"

Output() ::= <<
>>

Errors() ::= ""

masterGrammar(grammarName, slaveGrammarName) ::= <<
grammar M;
import S;
program : 'test' 'test';
WS : (UNICODE_CLASS_Zs)+ -> skip;
>>

slaveGrammar(grammarName) ::= <<
lexer grammar S;
fragment
UNICODE_CLASS_Zs    : '\u0020' | '\u00A0' | '\u1680' | '\u180E'
                    | '\u2000'..'\u200A'
                    | '\u202F' | '\u205F' | '\u3000'
                    ;
>>
